/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCreateInstruction,
  type ParsedIncrementInstruction,
} from '../instructions';

export const ANCHOR_COUNTER_PROGRAM_ADDRESS =
  'HofEBYD8C4G72HjCYbs3eiHXSoYXJdpQsQnVtAcf22bj' as Address<'HofEBYD8C4G72HjCYbs3eiHXSoYXJdpQsQnVtAcf22bj'>;

export enum AnchorCounterAccount {
  Counter,
}

export function identifyAnchorCounterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AnchorCounterAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25])
      ),
      0
    )
  ) {
    return AnchorCounterAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a anchorCounter account.'
  );
}

export enum AnchorCounterInstruction {
  Create,
  Increment,
}

export function identifyAnchorCounterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AnchorCounterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 30, 200, 40, 5, 28, 7, 119])
      ),
      0
    )
  ) {
    return AnchorCounterInstruction.Create;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 18, 104, 9, 104, 174, 59, 33])
      ),
      0
    )
  ) {
    return AnchorCounterInstruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a anchorCounter instruction.'
  );
}

export type ParsedAnchorCounterInstruction<
  TProgram extends string = 'HofEBYD8C4G72HjCYbs3eiHXSoYXJdpQsQnVtAcf22bj',
> =
  | ({
      instructionType: AnchorCounterInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: AnchorCounterInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
